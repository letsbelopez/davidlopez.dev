<h2>Allergy Food Journal</h2>
<p>Has your stomach ever hurt after eating something but you couldn't figure out why?</p>

<section>
  <h3>Here's how to use it.</h3>
  <p>Log what you eat and mark whether your stomach hurt or not. One way to do it is to log all everything you ate in a
    day and mark if your stomach hurt or not.</p>
  <p>When you log enough data, press calculate to find out what foods have a positive and negative correlation to your
    stomach pain. Foods that are positively correlated to your pain, will have a value closer to 1. Foods that are
    negatively correlated to your pain, will have a value closer to -1.</p>
</section>

<section>
  <h3>Journal Entry Form</h3>
  <form>
    <fieldset>
      <legend>Add foods - one per input</legend>
      <div>
        <input type="text" class="food" />
        <button class="delete" type="button">delete</button>
      </div>
    </fieldset>
    <button id="add" type="button">Add more food inputs</button>
    <label for="pain">Was there pain?
      <input type="checkbox" id="pain">
    </label>
    <button type="button" id="submit">Save Entry</button>
  </form>
</section>

<section id="correlations">
  <h3>Food - Pain Correlations</h3>
  <p>Here is where we will calculate the food and pain correlations based on your journal entries.</p>
  <button id="calculate">Calculate</button>
  <button onclick="tableBody.innerHTML = '';">Clear Results</button>
  <table>
    <thead>
      <tr>
        <th>Food</th>
        <th>Phi Coefficient</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
</section>

<section>
  <h3>Your Journal</h3>
  <pre><code>Your journal is empty. Create an entry.</code></pre>
</section>

<template>
  <div>
    <input type="text" class="food" /><button class="delete" type="button">delete</button>
  </div>
</template>

<style>
  fieldset {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }

  form {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }

  form > * + * {
    margin-top: 1rem;
  }
</style>

<script>
  const submit = document.querySelector('#submit');
  const add = document.querySelector('#add');
  const calculateButton = document.querySelector('#calculate');
  const template = document.querySelector('template').content;
  const foodInputs = document.querySelector('fieldset');
  const pain = document.querySelector('#pain');
  const form = document.querySelector('form');
  const correlations = document.querySelector('#correlations');
  const tableBody = document.querySelector('tbody');
  const code = document.querySelector('code');
  add.addEventListener('click', appendInput);
  foodInputs.addEventListener('click', deleteFood);
  submit.addEventListener('click', save);
  calculateButton.addEventListener('click', calculate);
  const journal = [];

  function addEntry(foods, pain) {
    journal.push({ foods, pain });
    code.textContent = JSON.stringify(journal, null, 2);
  }

  function phi([[n00, n01, n10, n11]]) {
    const dividend = (n11 * n00 - n10 * n01);
    const divisor = Math.sqrt((n10 + n11) *
      (n00 + n01) *
      (n01 + n11) *
      (n00 + n10));
    return dividend / divisor;
  }

  function tableFor(food, journal) {
    let table = [0, 0, 0, 0];
    for (let entry of journal) {
      let index = 0;
      if (entry.foods.includes(food)) index += 1;
      if (entry.pain) index += 2;
      table[index] += 1;
    }
    return table;
  }

  function journalFoods(journal) {
    let foods = [];
    for (let entry of journal) {
      for (let food of entry.foods) {
        if (!foods.includes(food)) {
          foods.push(food);
        }
      }
    }
    return foods;
  }

  function appendInput() {
    foodInputs.appendChild(document.importNode(template, true));
  }

  function deleteFood(e) {
    if (Array.from(e.target.classList).includes('delete')) {
      e.target.previousElementSibling.remove();
      e.target.remove();
    }
  }

  function save() {
    let foods = [];
    let inputs = Array.from(document.querySelectorAll('.food'));
    for (let input of inputs) {
      foods.push(input.value);
    }
    addEntry(foods, pain.checked);
    form.reset();
  }

  function calculate() {
    tableBody.innerHTML = '';
    for (let food of journalFoods(journal)) {
      let num = phi(tableFor(food, journal));
      appendRow(food, num);
      console.log(`${food} :`, phi(tableFor(food, journal)));
    }
  }

  function appendRow(food, phi) {
    let tr = document.createElement('tr');
    let foodCell = document.createElement('td');
    let phiCell = document.createElement('td');
    foodCell.textContent = food;
    phiCell.textContent = phi;
    tr.appendChild(foodCell);
    tr.appendChild(phiCell);
    tableBody.appendChild(tr);
  }
</script>